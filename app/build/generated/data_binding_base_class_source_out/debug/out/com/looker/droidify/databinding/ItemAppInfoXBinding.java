// Generated by view binder compiler. Do not edit!
package com.looker.droidify.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.divider.MaterialDivider;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textview.MaterialTextView;
import com.looker.droidify.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAppInfoXBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton action;

  @NonNull
  public final MaterialTextView dev;

  @NonNull
  public final MaterialCardView devBlock;

  @NonNull
  public final ShapeableImageView devIcon;

  @NonNull
  public final MaterialDivider divider1;

  @NonNull
  public final MaterialDivider divider2;

  @NonNull
  public final MaterialDivider divider3;

  @NonNull
  public final LinearLayoutCompat headerInfo;

  @NonNull
  public final ShapeableImageView icon;

  @NonNull
  public final MaterialTextView name;

  @NonNull
  public final MaterialTextView packageName;

  @NonNull
  public final LinearProgressIndicator progress;

  @NonNull
  public final LinearLayoutCompat releaseInfo;

  @NonNull
  public final MaterialTextView sdk;

  @NonNull
  public final LinearLayoutCompat sdkBlock;

  @NonNull
  public final MaterialTextView size;

  @NonNull
  public final LinearLayoutCompat sizeBlock;

  @NonNull
  public final MaterialTextView status;

  @NonNull
  public final LinearLayoutCompat statusLayout;

  @NonNull
  public final MaterialTextView version;

  @NonNull
  public final LinearLayoutCompat versionBlock;

  private ItemAppInfoXBinding(@NonNull ConstraintLayout rootView, @NonNull MaterialButton action,
      @NonNull MaterialTextView dev, @NonNull MaterialCardView devBlock,
      @NonNull ShapeableImageView devIcon, @NonNull MaterialDivider divider1,
      @NonNull MaterialDivider divider2, @NonNull MaterialDivider divider3,
      @NonNull LinearLayoutCompat headerInfo, @NonNull ShapeableImageView icon,
      @NonNull MaterialTextView name, @NonNull MaterialTextView packageName,
      @NonNull LinearProgressIndicator progress, @NonNull LinearLayoutCompat releaseInfo,
      @NonNull MaterialTextView sdk, @NonNull LinearLayoutCompat sdkBlock,
      @NonNull MaterialTextView size, @NonNull LinearLayoutCompat sizeBlock,
      @NonNull MaterialTextView status, @NonNull LinearLayoutCompat statusLayout,
      @NonNull MaterialTextView version, @NonNull LinearLayoutCompat versionBlock) {
    this.rootView = rootView;
    this.action = action;
    this.dev = dev;
    this.devBlock = devBlock;
    this.devIcon = devIcon;
    this.divider1 = divider1;
    this.divider2 = divider2;
    this.divider3 = divider3;
    this.headerInfo = headerInfo;
    this.icon = icon;
    this.name = name;
    this.packageName = packageName;
    this.progress = progress;
    this.releaseInfo = releaseInfo;
    this.sdk = sdk;
    this.sdkBlock = sdkBlock;
    this.size = size;
    this.sizeBlock = sizeBlock;
    this.status = status;
    this.statusLayout = statusLayout;
    this.version = version;
    this.versionBlock = versionBlock;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAppInfoXBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAppInfoXBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_app_info_x, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAppInfoXBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action;
      MaterialButton action = ViewBindings.findChildViewById(rootView, id);
      if (action == null) {
        break missingId;
      }

      id = R.id.dev;
      MaterialTextView dev = ViewBindings.findChildViewById(rootView, id);
      if (dev == null) {
        break missingId;
      }

      id = R.id.dev_block;
      MaterialCardView devBlock = ViewBindings.findChildViewById(rootView, id);
      if (devBlock == null) {
        break missingId;
      }

      id = R.id.dev_icon;
      ShapeableImageView devIcon = ViewBindings.findChildViewById(rootView, id);
      if (devIcon == null) {
        break missingId;
      }

      id = R.id.divider1;
      MaterialDivider divider1 = ViewBindings.findChildViewById(rootView, id);
      if (divider1 == null) {
        break missingId;
      }

      id = R.id.divider2;
      MaterialDivider divider2 = ViewBindings.findChildViewById(rootView, id);
      if (divider2 == null) {
        break missingId;
      }

      id = R.id.divider3;
      MaterialDivider divider3 = ViewBindings.findChildViewById(rootView, id);
      if (divider3 == null) {
        break missingId;
      }

      id = R.id.header_info;
      LinearLayoutCompat headerInfo = ViewBindings.findChildViewById(rootView, id);
      if (headerInfo == null) {
        break missingId;
      }

      id = R.id.icon;
      ShapeableImageView icon = ViewBindings.findChildViewById(rootView, id);
      if (icon == null) {
        break missingId;
      }

      id = R.id.name;
      MaterialTextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.package_name;
      MaterialTextView packageName = ViewBindings.findChildViewById(rootView, id);
      if (packageName == null) {
        break missingId;
      }

      id = R.id.progress;
      LinearProgressIndicator progress = ViewBindings.findChildViewById(rootView, id);
      if (progress == null) {
        break missingId;
      }

      id = R.id.release_info;
      LinearLayoutCompat releaseInfo = ViewBindings.findChildViewById(rootView, id);
      if (releaseInfo == null) {
        break missingId;
      }

      id = R.id.sdk;
      MaterialTextView sdk = ViewBindings.findChildViewById(rootView, id);
      if (sdk == null) {
        break missingId;
      }

      id = R.id.sdk_block;
      LinearLayoutCompat sdkBlock = ViewBindings.findChildViewById(rootView, id);
      if (sdkBlock == null) {
        break missingId;
      }

      id = R.id.size;
      MaterialTextView size = ViewBindings.findChildViewById(rootView, id);
      if (size == null) {
        break missingId;
      }

      id = R.id.size_block;
      LinearLayoutCompat sizeBlock = ViewBindings.findChildViewById(rootView, id);
      if (sizeBlock == null) {
        break missingId;
      }

      id = R.id.status;
      MaterialTextView status = ViewBindings.findChildViewById(rootView, id);
      if (status == null) {
        break missingId;
      }

      id = R.id.status_layout;
      LinearLayoutCompat statusLayout = ViewBindings.findChildViewById(rootView, id);
      if (statusLayout == null) {
        break missingId;
      }

      id = R.id.version;
      MaterialTextView version = ViewBindings.findChildViewById(rootView, id);
      if (version == null) {
        break missingId;
      }

      id = R.id.version_block;
      LinearLayoutCompat versionBlock = ViewBindings.findChildViewById(rootView, id);
      if (versionBlock == null) {
        break missingId;
      }

      return new ItemAppInfoXBinding((ConstraintLayout) rootView, action, dev, devBlock, devIcon,
          divider1, divider2, divider3, headerInfo, icon, name, packageName, progress, releaseInfo,
          sdk, sdkBlock, size, sizeBlock, status, statusLayout, version, versionBlock);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
