// Generated by view binder compiler. Do not edit!
package com.looker.droidify.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.circularreveal.CircularRevealFrameLayout;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textview.MaterialTextView;
import com.looker.droidify.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TabsToolbarBinding implements ViewBinding {
  @NonNull
  private final LinearLayoutCompat rootView;

  @NonNull
  public final LinearLayoutCompat sectionChange;

  @NonNull
  public final ShapeableImageView sectionIcon;

  @NonNull
  public final CircularRevealFrameLayout sectionLayout;

  @NonNull
  public final MaterialTextView sectionName;

  @NonNull
  public final TabLayout tabs;

  private TabsToolbarBinding(@NonNull LinearLayoutCompat rootView,
      @NonNull LinearLayoutCompat sectionChange, @NonNull ShapeableImageView sectionIcon,
      @NonNull CircularRevealFrameLayout sectionLayout, @NonNull MaterialTextView sectionName,
      @NonNull TabLayout tabs) {
    this.rootView = rootView;
    this.sectionChange = sectionChange;
    this.sectionIcon = sectionIcon;
    this.sectionLayout = sectionLayout;
    this.sectionName = sectionName;
    this.tabs = tabs;
  }

  @Override
  @NonNull
  public LinearLayoutCompat getRoot() {
    return rootView;
  }

  @NonNull
  public static TabsToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TabsToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.tabs_toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TabsToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.section_change;
      LinearLayoutCompat sectionChange = ViewBindings.findChildViewById(rootView, id);
      if (sectionChange == null) {
        break missingId;
      }

      id = R.id.section_icon;
      ShapeableImageView sectionIcon = ViewBindings.findChildViewById(rootView, id);
      if (sectionIcon == null) {
        break missingId;
      }

      id = R.id.section_layout;
      CircularRevealFrameLayout sectionLayout = ViewBindings.findChildViewById(rootView, id);
      if (sectionLayout == null) {
        break missingId;
      }

      id = R.id.section_name;
      MaterialTextView sectionName = ViewBindings.findChildViewById(rootView, id);
      if (sectionName == null) {
        break missingId;
      }

      id = R.id.tabs;
      TabLayout tabs = ViewBindings.findChildViewById(rootView, id);
      if (tabs == null) {
        break missingId;
      }

      return new TabsToolbarBinding((LinearLayoutCompat) rootView, sectionChange, sectionIcon,
          sectionLayout, sectionName, tabs);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
