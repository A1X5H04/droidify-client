// Generated by view binder compiler. Do not edit!
package com.looker.droidify.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.circularreveal.CircularRevealFrameLayout;
import com.looker.droidify.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appbarLayout;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final MaterialCardView fragmentContent;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final CircularRevealFrameLayout toolbarExtra;

  private FragmentBinding(@NonNull CoordinatorLayout rootView, @NonNull AppBarLayout appbarLayout,
      @NonNull CollapsingToolbarLayout collapsingToolbar, @NonNull MaterialCardView fragmentContent,
      @NonNull MaterialToolbar toolbar, @NonNull CircularRevealFrameLayout toolbarExtra) {
    this.rootView = rootView;
    this.appbarLayout = appbarLayout;
    this.collapsingToolbar = collapsingToolbar;
    this.fragmentContent = fragmentContent;
    this.toolbar = toolbar;
    this.toolbarExtra = toolbarExtra;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appbar_layout;
      AppBarLayout appbarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appbarLayout == null) {
        break missingId;
      }

      id = R.id.collapsing_toolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.fragment_content;
      MaterialCardView fragmentContent = ViewBindings.findChildViewById(rootView, id);
      if (fragmentContent == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.toolbar_extra;
      CircularRevealFrameLayout toolbarExtra = ViewBindings.findChildViewById(rootView, id);
      if (toolbarExtra == null) {
        break missingId;
      }

      return new FragmentBinding((CoordinatorLayout) rootView, appbarLayout, collapsingToolbar,
          fragmentContent, toolbar, toolbarExtra);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
